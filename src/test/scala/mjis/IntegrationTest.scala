package mjis

import org.scalatest.{BeforeAndAfter, Matchers, FlatSpec}
import CompilerTestMatchers.passIntegrationTest

class IntegrationTest extends FlatSpec with Matchers with BeforeAndAfter {

  // Change this to true to see which new files our backend can handle.
  // You can uncomment the green tests in KnownGoodFiles.
  val KnownGoodFilesCheckMode = true

  val TestDir = "mj-test/run/"

  // Files our backend can already handle
  val KnownGoodFiles = Set[String](
    "ArrayParam.mj",
    "ArrayReturn.mj",
    "Assignment.mj",
    "BooleanExpr.mj",
    "BooleanExpr2.mj",
    "ExprStatements.mj",
    //"fannkuch.mj",
    "fortyfive.mj",
    "fortyfour.mj",
    "fortysomething.mj",
    "fortythree.mj",
    "fortytwo.mj",
    "LinkedListInsertion.mj",
    "LocalVarDeclScope.mj",
    //"Matrix.mj",
    "NestedArrays.mj",
    "Peter_001.mj",
    //"Pi.mj",
    "prometheus1.mj",
    "prometheus2.mj",
    //"prometheus3.mj",
    "prometheus4.mj",
    "prometheus5.mj",
    //"RecursiveArraySum.mj",
    "Simon_001.mj",
    "Simon_002.mj",
    "Simon_003.mj",
    "Simon_004.mj",
    "Simon_005.mj",
    "Simon_006.mj",
    "Simon_007.mj",
    "Simon_008.mj",
    "Simon_009.mj",
    "Simon_010.mj",
    "Simon_011.mj",
    "Simon_012.mj",
    "Simon_013.mj",
    "Simon_014.mj",
    "Simon_015.mj",
    "Simon_016.mj",
    "Simon_017.mj",
    "Simon_018.mj",
    "Simon_019.mj",
    "Simon_020.mj",
    "Simon_021.mj",
    "Simon_022.mj",
    "Simon_023.mj",
    "Simon_024.mj",
    "Simon_025.mj",
    "Simon_026.mj",
    "Simon_027.mj",
    "Simon_028.mj",
    "Simon_029.mj",
    "Simon_030.mj",
    "Simon_031.mj",
    "Simon_032.mj",
    "Simon_033.mj",
    "Simon_034.mj",
    "Simon_035.mj",
    //"Simon_036.mj",
    "Simon_037.mj",
    "Simon_038.mj",
    "Simon_039.mj",
    "Simon_040.mj",
    "Simon_041.mj",
    "Simon_042.mj",
    "Simon_043.mj",
    "Simon_044.mj",
    "Simon_045.mj",
    "Simon_046.mj",
    "Simon_047.mj",
    "Simon_048.mj",
    "Simon_049.mj",
    //"Simon_050.mj",
    "Simon_051.mj",
    "Simon_052.mj",
    "Simon_053.mj",
    "Simon_054.mj",
    "Simon_055.mj",
    "Simon_056.mj",
    "Simon_057.mj",
    "Simon_058.mj",
    "Simon_059.mj",
    "Simon_060.mj",
    "Simon_061.mj",
    "Simon_062.mj",
    "Simon_063.mj",
    "Simon_064.mj",
    "Simon_065.mj",
    "Simon_066.mj",
    "Simon_067.mj",
    "Simon_068.mj",
    "Simon_069.mj",
    "Simon_070.mj",
    "Simon_071.mj",
    "Simon_072.mj",
    "Simon_073.mj",
    "Simon_074.mj",
    "Simon_075.mj",
    "Simon_076.mj",
    "Simon_077.mj",
    "Simon_078.mj",
    "Simon_079.mj",
    "Simon_080.mj",
    "Simon_081.mj",
    "Simon_082.mj",
    "Simon_083.mj",
    "Simon_084.mj",
    "Simon_085.mj",
    "Simon_086.mj",
    //"Simon_087.mj",
    "Simon_088.mj",
    "Simon_089.mj",
    "Simon_090.mj",
    "Simon_091.mj",
    "Simon_092.mj",
    "Simon_093.mj",
    "Simon_094.mj",
    "Simon_095.mj",
    "Simon_096.mj",
    "Simon_097.mj",
    "Simon_098.mj",
    "Simon_099.mj",
    "Simon_100.mj",
    "Simon_101.mj",
    "Simon_102.mj",
    //"Simon_103.mj",
    //"Simon_104.mj",
    //"Simon_105.mj",
    //"Simon_106.mj",
    //"Simon_107.mj",
    "Simon_108.mj",
    "Simon_109.mj",
    //"Simon_110.mj",
    //"Simon_111.mj",
    //"Simon_112.mj",
    "Simon_113.mj",
    "Simon_114.mj",
    "Simon_115.mj",
    //"Simon_116.mj",
    //"Simon_117.mj",
    "Simon_118.mj",
    "Simon_119.mj",
    "Simon_120.mj",
    //"Simon_121.mj",
    //"Simon_122.mj",
    "Simon_123.mj",
    "Simon_124.mj",
    //"Simon_125.mj",
    "Simon_126.mj",
    "Simon_127.mj",
    "Simon_128.mj",
    "Simon_129.mj",
    "Simon_130.mj",
    "Simon_131.mj",
    "Simon_132.mj",
    "Simon_133.mj",
    "Simon_134.mj",
    "Simon_135.mj",
    "Simon_136.mj",
    "Simon_137.mj",
    "Simon_138.mj",
    "Simon_139.mj",
    "Simon_140.mj",
    //"Simon_141.mj",
    "Simon_142.mj",
    //"Sorter.mj",
    "Void.mj"
  )

  val testFiles = new java.io.File(TestDir).listFiles.filter(_.getName.endsWith(".mj")).sortBy(_.getName.toLowerCase)

  if (KnownGoodFilesCheckMode) {
    for (file <- testFiles.filter(file => !KnownGoodFiles.contains(file.getName))) {
      file.getName should "produce correct output with our backend" in {
        file.getPath should passIntegrationTest(useFirmBackend = false)
      }
    }
  } else {
    for (file <- testFiles) {
      file.getName should "produce correct output with the FIRM backend" in {
        file.getPath should passIntegrationTest(useFirmBackend = true)
      }

      if (KnownGoodFiles.contains(file.getName)) {
        it should "produce correct output with our backend" in {
          file.getPath should passIntegrationTest(useFirmBackend = false)
        }
      }
    }
  }
}
