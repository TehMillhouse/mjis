lookahead
1         Program → ClassDeclaration*
1         ClassDeclaration → 'class' IDENT { ClassMember* }
4         ClassMember → Field | Method | MainMethod
0         Field → 'public' Type IDENT ';'
0         MainMethod → 'public' 'static' 'void' IDENT ( 'String' '[' ']' IDENT ) Block
1         Method → 'public' Type IDENT ( Parameters? ) Block
inf       Parameters → Parameter | Parameter ',' Parameters
0         Parameter → Type IDENT
inf       Type → Type '[' ']' | BasicType
1         BasicType → 'int' | 'boolean' | 'void' | IDENT
1         Statement → Block
           | EmptyStatement
           | IfStatement
           | ExpressionStatement
           | WhileStatement
           | ReturnStatement
1         Block → { BlockStatement* }
3         BlockStatement → Statement | LocalVariableDeclarationStatement
1         LocalVariableDeclarationStatement → Type IDENT ('=' Expression)? ';'
0         EmptyStatement → ';'
0         WhileStatement → 'while' '(' Expression ')' Statement
1         IfStatement → 'if' '(' Expression ')' Statement ('else' Statement)?
0         ExpressionStatement → Expression ';'
1         ReturnStatement → 'return' Expression? ';'
inf       Expression → AssignmentExpression
inf       AssignmentExpression → LogicalOrExpression ('=' AssignmentExpression)?
inf       LogicalOrExpression → (LogicalOrExpression '||')? LogicalAndExpression
inf       LogicalAndExpression → (LogicalAndExpression '&&')? EqualityExpression
inf       EqualityExpression → (EqualityExpression ('==' | '!='))? RelationalExpression
inf       RelationalExpression → (RelationalExpression ('<' | '<=' | '>' | '>='))? AdditiveExpression
inf       AdditiveExpression → (AdditiveExpression ('+' | '-'))? MultiplicativeExpression
inf       MultiplicativeExpression → (MultiplicativeExpression ('*' | '/' | '%'))? UnaryExpression
1         UnaryExpression → PostfixExpression | ('!' | '-') UnaryExpression
1         PostfixExpression → PrimaryExpression (PostfixOp)*
3         PostfixOp → MethodInvocation
           | FieldAccess
           | ArrayAccess
0         MethodInvocation → '.' IDENT '(' Arguments ')'
0         FieldAccess → '.' IDENT
0         ArrayAccess → '[' Expression ']'
1         Arguments → (Expression (',' Expression)*)?
3         PrimaryExpression → 'null'
           | 'false'
           | 'true'
           | INTEGER_LITERAL
           | IDENT
           | IDENT '(' Arguments ')'
           | 'this'
           | '(' Expression ')'
           | NewObjectExpression
           | NewArrayExpression
0         NewObjectExpression → 'new' IDENT '(' ')'
2         NewArrayExpression → 'new' BasicType '[' Expression ']' ('[' ']')*
