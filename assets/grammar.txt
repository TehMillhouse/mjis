lookahead
1         Program → ClassDeclaration*
1         ClassDeclaration → 'class' IDENT { ClassMember* }
1         ClassMember → 'public' (MainMethod | TYPE IDENT (';' | Method))
0         MainMethod → 'static' 'void' IDENT ( 'String' '[' ']' IDENT ) Block
1         Method → '(' Parameters? ')' Block
1         Parameters → Parameter (',' Parameters)*
0         Parameter → Type IDENT
1         Type → BasicType ('[' ']')*
1         BasicType → 'int' | 'boolean' | 'void' | IDENT
1         Statement → Block
           | EmptyStatement
           | IfStatement
           | ExpressionStatement
           | WhileStatement
           | ReturnStatement
1         Block → { BlockStatement* }
3         BlockStatement → Statement | LocalVariableDeclarationStatement
1         LocalVariableDeclarationStatement → Type IDENT ('=' Expression)? ';'
0         EmptyStatement → ';'
0         WhileStatement → 'while' '(' Expression ')' Statement
1         IfStatement → 'if' '(' Expression ')' Statement ('else' Statement)?
0         ExpressionStatement → Expression ';'
1         ReturnStatement → 'return' Expression? ';'
1         Expression → AssignmentExpression
1         AssignmentExpression → LogicalOrExpression ('=' AssignmentExpression)?
1         LogicalOrExpression → LogicalAndExpression ('||' LogicalOrExpression)?
1         LogicalAndExpression → EqualityExpression ('&&' LogicalAndExpression)?
1         EqualityExpression → RelationalExpression (('==' | '!=') EqualityExpression)?
1         RelationalExpression → AdditiveExpression (('<' | '<=' | '>' | '>=') RelationalExpression)?
1         AdditiveExpression → MultiplicativeExpression (('+' | '-') AdditiveExpression)?
1         MultiplicativeExpression → UnaryExpression (('*' | '/' | '%') MultiplicativeExpression)?
1         UnaryExpression → PostfixExpression | ('!' | '-') UnaryExpression
1         PostfixExpression → PrimaryExpression (PostfixOp)*
1         PostfixOp → '.' IDENT ('(' Arguments ')')?
           | ArrayAccess
0         ArrayAccess → '[' Expression ']'
1         Arguments → (Expression (',' Expression)*)?
2         PrimaryExpression → 'null'
           | 'false'
           | 'true'
           | INTEGER_LITERAL
           | IDENT
           | IDENT '(' Arguments ')'
           | 'this'
           | '(' Expression ')'
           | 'new' (NewObjectExpression | NewArrayExpression)
0         NewObjectExpression → IDENT '(' ')'
2         NewArrayExpression → BasicType '[' Expression ']' ('[' ']')*
